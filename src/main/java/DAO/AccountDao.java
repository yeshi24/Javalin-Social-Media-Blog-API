package DAO;
import Model.Account;
import Util.ConnectionUtil;
import java.sql.*;

public class AccountDao {
    
    /*This method is used for creating new account */

    public Account insertAccount(Account account)
    {
        Connection con= ConnectionUtil.getConnection();
        try{
            String sql="insert into account(username,password) values(?,?)";

            PreparedStatement prepStmnt=con.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
            prepStmnt.setString(1, account.getUsername());
            prepStmnt.setString(2, account.getPassword());
            prepStmnt.executeUpdate();

            /*
             Since the Account object passed as a parameter to this method does not include the primary 
             key(account_id) which is auto generated by the database, after inserting the record, 
             the primary key is retrieved  below using getGeneratedKeys(). Then a new Account object which 
             includes the account_id is created and returned
           */
            ResultSet rs=prepStmnt.getGeneratedKeys();
            if(rs.next())
            {
                int genrtdId=(int)rs.getLong(1);
                return new Account(genrtdId,account.getUsername(),account.getPassword());
            }
        }catch(SQLException e)
        {
            e.printStackTrace();
        }
       return null;
    }

    /*
     This method is checking if the user name is already exist. It is called during account creation at the service layer 
     in order to prevent duplicate account creation.
    */
    public Account getAccountByUsername(String username)
    {
        Connection con=ConnectionUtil.getConnection();
        try{
            String sql="select * from account where username=?";
            PreparedStatement prepStmnt=con.prepareStatement(sql);
            prepStmnt.setString(1,username);
            ResultSet rs=prepStmnt.executeQuery();
            if(rs.next())
            {
                return new Account(rs.getInt("account_id"),
                                   rs.getString("username"),
                                   rs.getString("password"));
            }

        }catch(SQLException e){
            e.printStackTrace();
        }
      return null;
    }

    /*
     This method is used to authenticate the validity of user name and password provided when the 
     user tries to login. 
    */
    public Account getAccountByUsernameAndPassword(Account account)
    {
        Connection con= ConnectionUtil.getConnection();
        try{
            String sql= "select * from account where username=? and password=?";
            PreparedStatement prepStmnt=con.prepareStatement(sql);
            prepStmnt.setString(1, account.getUsername());
            prepStmnt.setString(2, account.getPassword());
            ResultSet rs=prepStmnt.executeQuery();
            if(rs.next())
            {
                return new Account(rs.getInt("account_id"),
                                   rs.getString("username"),
                                   rs.getString("password"));
            }

        }catch(SQLException e){
           e.printStackTrace();
        }

        return null;
    }
    
    /*
      This method is used for checking if the account is existed in the database or not.
      Then return true or false accodingly. This method is called during message registration/creation to 
      prevent invalid account_id which is not exist in the parent/primary table Account.
    */
    public boolean isUserExist(int accountId)
    {
        Connection con= ConnectionUtil.getConnection();
        boolean result=false;
        try{
            String sql ="select account_id from account where account_id=?";
            PreparedStatement prepStmnt=con.prepareStatement(sql);
            prepStmnt.setInt(1,accountId);
            ResultSet rs=prepStmnt.executeQuery();
            if(rs.next())
              result= true;
    
        }catch(SQLException e){
            e.printStackTrace();
        }

        return result;
    }
        
}
