package DAO;
import java.sql.*;
import Model.Message;
import java.util.List;
import java.util.ArrayList;
import Util.ConnectionUtil;

public class MessageDao {
       
/*This method is used for creating new message */
 public Message insertMessage(Message message){
    Connection con= ConnectionUtil.getConnection();
    try{
        String sql="insert into message(posted_by,message_text,time_posted_epoch) values(?,?,?)";
        PreparedStatement prepStmnt=con.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);
        prepStmnt.setInt(1,message.getPosted_by());
        prepStmnt.setString(2,message.getMessage_text());
        prepStmnt.setLong(3,message.getTime_posted_epoch());
        prepStmnt.executeUpdate();
        
        /*Since the Message object passes as parameter does not include the primary ky(message_id)
         which is auto generated by the database, after inserting the record, the primary key is feched
         below using getGeneratedKeys(). Then a new Message object which includes the message_id is 
         created and returned*/

        ResultSet rs=prepStmnt.getGeneratedKeys();
        if(rs.next()){
            return new Message(rs.getInt(1),
                               message.getPosted_by(),
                               message.getMessage_text(),
                               message.getTime_posted_epoch());
        }

    }catch(SQLException e){
       e.printStackTrace();
    }
    return null;
 }

 /*This method is to retrieve all available messages from message table.*/
 public List<Message> getAllMessages(){
    Connection con= ConnectionUtil.getConnection();
    
    List<Message> messages= new ArrayList<>();
   
    try{
        String sql="select * from message";
        Statement Stmnt=con.createStatement();
        ResultSet rs= Stmnt.executeQuery(sql);
        while(rs.next()){
            Message msg=new Message(rs.getInt("message_id"),
                                    rs.getInt("posted_by"),
                                    rs.getString("message_text"),
                                    rs.getLong("time_posted_epoch"));
            messages.add(msg);
        }  
    }catch(SQLException e){
        e.printStackTrace();
    }
    return messages;
 }

 /*This method is to retrieve a single message from message table filtering by its primary key(message_id).*/
 public Message getMessageByMessageId(int messageId){
    Connection con = ConnectionUtil.getConnection();
    try{
        String sql="select * from message where message_id=?";
        PreparedStatement prepStmnt=con.prepareStatement(sql);
        prepStmnt.setInt(1,messageId);
        ResultSet rs=prepStmnt.executeQuery();
        System.out.println("Message not empty");
        if(rs.next()){
            return new Message(rs.getInt("message_id"),
                               rs.getInt("posted_by"),
                               rs.getString("message_text"),
                               rs.getLong("time_posted_epoch"));
           
        }    
    }catch(SQLException e){
        System.out.println(e.getMessage());
        System.out.println("Message not empty");
    }
    return null;
 }

/*This method is to retrieve all  message from message table for specified user.*/
 public List<Message> getMessageByAccountId(int accountId){
    Connection con = ConnectionUtil.getConnection();
    List<Message> userMessages= new ArrayList<>();
    try{
        String sql="select * from message where posted_by=?";
        PreparedStatement prepStmnt=con.prepareStatement(sql);
        prepStmnt.setInt(1,accountId);
        ResultSet rs=prepStmnt.executeQuery();
        while(rs.next()){
            Message msg=new Message(rs.getInt("message_id"),
                                    rs.getInt("posted_by"),
                                    rs.getString("message_text"),
                                    rs.getLong("time_posted_epoch"));
            userMessages.add(msg);
        }  
    }catch(SQLException e){
        e.printStackTrace();
    }
    return userMessages;
 }

 /* This method is to delete a message for specified message id and if number of rows affected are greater than
    zero(if the messaage to be deleted is exists), the deleted message objet is returned otherwise null is 
    returned.
 */
 public Message deleteMessage(Message message){
    Connection con= ConnectionUtil.getConnection();
    
    int rowsAffected=0;
    try
    {
       String sql="delete message where message_id=?";
       PreparedStatement prepStmnt=con.prepareStatement(sql);
       prepStmnt.setInt(1,message.getMessage_id());
       rowsAffected=prepStmnt.executeUpdate();
       if(rowsAffected>0)
         {
            
            return message;
         }
         
       
    }catch(SQLException e){
        e.printStackTrace();
    }
    return null;
 }

  /* This method is to update a message for specified message id and if number of rows affected are greater than
     zero(if the messaage to be updated is exists), the updated message objet is returned, otherwise null is 
     returned.
  */
 public Message updateMessage(String message, int messageId){
    Connection con= ConnectionUtil.getConnection();
    
    Message messageUpdated= null;
    try{
        String sql="update message set message_text=? where message_id=?";
        PreparedStatement prepStmnt=con.prepareStatement(sql); 
        prepStmnt.setString(1,message);
        prepStmnt.setInt(2, messageId);
        int rowsAffected=prepStmnt.executeUpdate();
        if(rowsAffected>0)
        {
            messageUpdated= this.getMessageByMessageId(messageId);
        }
       

    }catch(SQLException e){
        System.out.println(e.getMessage());
    }
    
    return messageUpdated;
 }

 /*
   This method is for checking if the message id is existing thenreturn tru or false accordingly. 
   This method is going to be called during message update and delete methods of  MessageService class to 
   check if the message to be deleted or updated is existing before deleted or updated respectively 
 */
public boolean isMessageIdExist(int messageId)
{
    Connection con= ConnectionUtil.getConnection();
    try{
        String sql ="select message_id from message where message_id=?";
        PreparedStatement prepStmnt=con.prepareStatement(sql);
        prepStmnt.setInt(1,messageId);
        ResultSet rs=prepStmnt.executeQuery();
        if( rs.next())
            return true;

    }catch(SQLException e){
        e.printStackTrace();
    }
    return false;
}
 
}
